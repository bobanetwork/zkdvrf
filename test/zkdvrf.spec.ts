import chai, { expect } from 'chai'
import chaiAsPromised from 'chai-as-promised'
chai.use(chaiAsPromised)
import {solidity} from "ethereum-waffle";
import hre, { ethers } from 'hardhat'
import { Contract, Signer, BigNumber, utils, BigNumberish, ContractFactory, providers, Wallet } from 'ethers'
chai.use(solidity);

let Zkdvrf: Contract
let Halo2Verifier: Contract
let GlobalPublicParams: Contract
let PseudoRand: Contract

let minDeposit = utils.parseEther('0.01')

let account1: Signer
let account2: Signer
let account3: Signer
let account4: Signer
let account5: Signer
let account1Address: string
let account2Address: string
let account3Address: string
let account4Address: string
let account5Address: string


let pubKeyAcc1 = {X: '13022564727105651777525980989432672761973150245441769669319632814966958345925', Y: '784968079987676224643066681266495342411838584902826230352199930579969951847'}
let pubKeyAcc2 = {X: '17516097577725347870276576856069116689699059298851610095805623976850185435783', Y: '8808331464815978064599232731260068623537551908770110075179954635589888643395'}
let pubKeyAcc3 = {X: '4351378507277988265825600804193304606278693398267616407898718688250689357096', Y: '15385154406858937459081332068086188351372622358005057802771996619991388342821'}
let pubKeyAcc4 = {X: '16310184064488942469554000197235141712076856181291389186361991617328421440429', Y: '19134866168821787016128208131238929550044105509841219149325506675201180911506'}
let pubKeyAcc5 = {X: '13625264474684655048741494311839925183013543334318612318179307225083082507959', Y: '6992733409021127190857024846745568323293860444372327822148920377225293009420'}


let ppAcc1 = ['33122476292026876764773281040910857991179', '144457620319703769937884241265041039', '70903197827912711560420525137436690652892', '97571090399014734671255749808726287', '29302438218158930612644866833872092476095', '243345600946432065131157352376935655', '84308870273202473767408692924602722625421', '199910804109507596731922406072461556', '54549293866271353846074748296724870128823', '76568084573957902417332868764371885', '85747048104380189029847603820593895321738', '154866049557233805232853649130844942', '43967839214438855446468937915237105585210', '245994364850884554689156392325480834', '22689166127498204030187277530850239161365', '55937593707148366700604972797511967', '65887647402903277273407515936240810043466', '24238993860336333210882900407111937', '26575298010691249615442454539615575150987', '105458009747221993155734131438229523', '55689221229894100424083427899641427454479', '56924155332229628082105830977124761', '8964844869810854421887204763412561541506', '10889880552616138140235769079146750', '15779645011471696712695871130982882100004643699428156894220098450624390164491', '20970802533153136389295808731627364908446828948341532832472910505628473310781', '13022564727105651777525980989432672761973150245441769669319632814966958345925', '784968079987676224643066681266495342411838584902826230352199930579969951847', '6838419726246424935615448837820986180781835082414259632741574445398538834536', '17516097577725347870276576856069116689699059298851610095805623976850185435783', '8808331464815978064599232731260068623537551908770110075179954635589888643395', '17062321803566185593350871402315291322233451796432194474583131841019552433187', '4351378507277988265825600804193304606278693398267616407898718688250689357096', '15385154406858937459081332068086188351372622358005057802771996619991388342821', '2855535162763770634738317999363588672345456254473099122587254472464774995698', '16310184064488942469554000197235141712076856181291389186361991617328421440429', '19134866168821787016128208131238929550044105509841219149325506675201180911506', '15756525025143283672500029033452011184979422506816056922027328375182005419324', '13625264474684655048741494311839925183013543334318612318179307225083082507959', '6992733409021127190857024846745568323293860444372327822148920377225293009420', '5790122097278196318589369461185454365977365068757130198588779140570182012107', '76238805013062272293776784937222256070334', '42844025259418228535920787901284666', '45347075492369411118063088104499957571586', '6618144445459199771106179101226765', '61577350434719822900605978566264164202318', '83047469327403625366794447143070427', '30362239750467001573835298064813125265937', '65589743844670993098853204536033765']
let ppAcc2 = ['68841611100303986224009051383465561156138', '150457800527420710646307170933439972', '67002936479888867468107485292865659344759', '225754153439788777887578742196997088', '7558808546026171968191099902759547784284', '58314864560454376436456670947609424', '24225446876327046115806897739407968213556', '45534393575367159789343943082181865', '70898669739366062651258396693142806846409', '126838286187160753850155301195270824', '73461727457555506520758689891020094229326', '4591625531915579848749159705657351', '37812123239486242058197766943323815585557', '132712976901100882094949726906308428', '37991177022141915352968050300412471142622', '238399662620078436031582873984083886', '44054415457849631515873402770187940896545', '121629769617156643726184856393480431', '74415580201938877654544713105463553510107', '246291550863632427180814184484541067', '81234785144584458429014988984451509410091', '42756526563995932384707226883608040', '56913890470019541420804232111620726119333', '171519733485065417217065326096183674', '34290575945825534718473030649326474237456463614695330690754640725984932764', '15777308019012382937438553824936626857192067868348450495793493211222805204503', '13022564727105651777525980989432672761973150245441769669319632814966958345925', '784968079987676224643066681266495342411838584902826230352199930579969951847', '13443131837992437543302036404002578248132849729623599968486653237411489816758', '17516097577725347870276576856069116689699059298851610095805623976850185435783', '8808331464815978064599232731260068623537551908770110075179954635589888643395', '5844456597173189081989941292992388904997007865217532192417002245294969325333', '4351378507277988265825600804193304606278693398267616407898718688250689357096', '15385154406858937459081332068086188351372622358005057802771996619991388342821', '2073308893399544363366950621187378020292857789853659215933092952868590737094', '16310184064488942469554000197235141712076856181291389186361991617328421440429', '19134866168821787016128208131238929550044105509841219149325506675201180911506', '6346318513470460187623648772669774148924990719635049903294678225571938118879', '13625264474684655048741494311839925183013543334318612318179307225083082507959', '6992733409021127190857024846745568323293860444372327822148920377225293009420', '13508097283153978235621188248084651551997285492137038939430898963875791204690', '29797773360427952943309265324673589006571', '141501977276250432618658437984101678', '1310935567443609940821194434336524963875', '66431385627629041994931605938870035', '79796261184150311566554216240182396387008', '160958863310970734481571537487938338', '61883098677374633972261283697561874965273', '133255941799255074887644296951072431']
let ppAcc3 = ['44556798967552439724624863725438653862722', '141487400696095696268311414276338688', '25027182705286436585594788662805825179730', '216209138273079596561069383617953512', '27182482431847461840497353259917946145781', '172403321137208081989150734342865866', '56668412355232381822278966416042999851222', '220624038858116913660199650093327479', '65931742131309389621379745867081407259971', '165692723087923717730059750593371655', '35704389800718426001351257312419508058422', '198705276306064349970415180682398325', '85974289905515559682259475296262854550510', '226695532792603085529134760801658158', '53737503106548675303216647154899849375479', '23564910482827608128752919524082842', '79380467476795286564154971468022445573808', '109535349561738655121978181977371736', '73755385367520403036522325122807077282578', '134714154782358128432928878660529234', '40698512873452139355947898522657006145656', '190714575270598209226898279617474405', '51636146493061901313350584166317940767633', '200870239197571441382988418523839248', '9314388768656868051542997551736314113372540637895230324460021377207366891665', '8847797573317049035271207808931861969099903166701772525519959855470118241269', '13022564727105651777525980989432672761973150245441769669319632814966958345925', '784968079987676224643066681266495342411838584902826230352199930579969951847', '12510263942229253284703008096975606582985897856561557345651357184055252796177', '17516097577725347870276576856069116689699059298851610095805623976850185435783', '8808331464815978064599232731260068623537551908770110075179954635589888643395', '12447343016201055808412081180486088411746105931017242632262136394020485956139', '4351378507277988265825600804193304606278693398267616407898718688250689357096', '15385154406858937459081332068086188351372622358005057802771996619991388342821', '7133502441092792847550257016770309401303061654225072678828774743271026618836', '16310184064488942469554000197235141712076856181291389186361991617328421440429', '19134866168821787016128208131238929550044105509841219149325506675201180911506', '5488287002094570114918217796908590217796980760738571387722298794951881538415', '13625264474684655048741494311839925183013543334318612318179307225083082507959', '6992733409021127190857024846745568323293860444372327822148920377225293009420', '6948505009959323466797524490796182391830153698842029584066726359782263684090', '3820364800798323999730971112045382041203', '213806117568579354848441966493525147', '28594771953527261843136757662778927822575', '100582376395540117204065033996209258', '32240735056673727895803061361498168105429', '117256264634541975844277918231483095', '12787257293547096823931954804459205080533', '68199928380833715848536757098616523']
let ppAcc4 = ['54668685489732891056594903699939846194727', '201721283194573939755694465183726448', '84071249447834153165317140972195146790319', '16820535872005216446382260462900773', '40036069878926966488107523293590723501095', '236874953458231479843925550579110466', '76322225523034271994275642436179159674559', '151042119012886528025763017404757789', '69806781014655352253935088440153362887014', '109048681157266258217151126095438538', '43038766103250774093852988171634507787869', '22021039058056993774413426528054368', '60362086023963121486240065014681158949456', '13291026072752454695732610538696544', '40822764491818635324889365494181814390013', '174195579629581808375481964897793520', '8316500116673401436557902252698175086048', '107479125485551274284772726638728095', '37948966554161414650694377632418070111527', '70150785069396215504450905355072048', '19221237067030826317911909103130323105049', '108356088286144391309070488836303297', '45941242972206712977227105223202258005101', '74136586434334565936572088514893562', '1421697202950990368067500403403824962144880995626975039260861747397571995990', '14166605280316049681947396032562627334988951127944508054422824629320727574882', '13022564727105651777525980989432672761973150245441769669319632814966958345925', '784968079987676224643066681266495342411838584902826230352199930579969951847', '20847929256705313170256790082156437303915525665432806312048106933144807656010', '17516097577725347870276576856069116689699059298851610095805623976850185435783', '8808331464815978064599232731260068623537551908770110075179954635589888643395', '7177684818680920116477750192263465202621449438063419721256526967384548039898', '4351378507277988265825600804193304606278693398267616407898718688250689357096', '15385154406858937459081332068086188351372622358005057802771996619991388342821', '14038472905944962423025917582205383662404645544786090385740250336111190283261', '16310184064488942469554000197235141712076856181291389186361991617328421440429', '19134866168821787016128208131238929550044105509841219149325506675201180911506', '15060870875763423631349768650428050340975677281097646850862279113580960063066', '13625264474684655048741494311839925183013543334318612318179307225083082507959', '6992733409021127190857024846745568323293860444372327822148920377225293009420', '765185202986623061249911823247743596084186317922310147096004074862962526796', '34982923328887574930954595374273286649709', '94235490423019940947958261143303371', '55956532910902308136569648887708342079520', '180654936710112530690507973898018710', '49290299027997094199677382620293071685281', '116024344561479783522124605784385296', '55849945120442653232288299739018640960693', '32739832176057501439102850171504541']
let ppAcc5 = ['36707305520128495499748697183597037007074', '132970359861649609605886484408120559', '34364945937212919905268476353268849498707', '144485566667667529673753275623163369', '38786122194714485947993187811490750918196', '129189549266020761444479147159317870', '77017929932163792311880609622918078481702', '61685220551149212020316818601551313', '45672309652417157070686932215408181926053', '237586991725361414934908092776673388', '84519560611491035202521190966410109079715', '156672590687784387136352516174920273', '46830819504727155983238643979548041008174', '70391959129352398303610550491543431', '43471391043661727113758439236869478622468', '141258781719201857591779584626851024', '56718632111027307417307982778502411792019', '108326050985521471837747172214803280', '3650127377379544825733239267243354674656', '14832072455982637016163517337312556', '4915430165929491444422352542127995478572', '178605183677351303031197018346824936', '47850656375596543558994779377364207317840', '87626156983004100683536890339677797', '2460373646765617328334736420845812653194196005838021984945410018116897820095', '7427773923814201422265486891096095821568178205868896242303513238769307923838', '13022564727105651777525980989432672761973150245441769669319632814966958345925', '784968079987676224643066681266495342411838584902826230352199930579969951847', '1413621816704400841545510163257216021827790228357251519786391081198571867763', '17516097577725347870276576856069116689699059298851610095805623976850185435783', '8808331464815978064599232731260068623537551908770110075179954635589888643395', '1001434258762054831483287554580457711132123521316053161987133743103410674737', '4351378507277988265825600804193304606278693398267616407898718688250689357096', '15385154406858937459081332068086188351372622358005057802771996619991388342821', '18601316354767881143084510858458305129313390125662310093668426759410681927193', '16310184064488942469554000197235141712076856181291389186361991617328421440429', '19134866168821787016128208131238929550044105509841219149325506675201180911506', '19530012425075035994443369715609314316776886451317032622605012958168407824387', '13625264474684655048741494311839925183013543334318612318179307225083082507959', '6992733409021127190857024846745568323293860444372327822148920377225293009420', '16863631353093062713608367370914588598277252357105452840596445695170786702991', '72173411547384690432767851695155152035589', '245007175485490913488689526154963580', '80146712349471070783194915782700560475847', '87840819215544524062615613245165702', '44978943400837283399254375469979875220007', '229493251278105224690254309001014933', '44763597460396194423563167451926241449223', '18508894466413880984385440231700293']

let ppZkAcc1 = ''
let ppZkAcc2 = ''
let ppZkAcc3 = ''
let ppZkAcc4 = ''
let ppZkAcc5 = '0x251dcae574a051a9af5df9131d763cf9f1db01e5be5f24830fd995d148e714420a59db19c7c6e0e5692c42084e55842ad53b32cb9be1c8125c28b4bad1bcbbdf26bd51bd8349acb3c747938abfc136801e9ad98adaf00dc97637372af6f1013410bbad78ec3da37d821e042a15503814aafed2d2c7ae23157b661d6f2ae1915a1689486c452d85c88f218bb2fed86176a448483e0ace0f545184892abf7a190f3045a5fc48d38cf58a7e4476adb3b4da572a4ec71bf27b053b62869d7f3860e904e7c868fb5b5b15808ba2440dd49fc79dcb18ac8f44be5e8d316c23ba6d616025415a2d26830b2d111728021b913e7b05d1207ef3e7dad5839904b9354d0ebf0cdb800e94e9e551317d7c60f5077b682cfcd2c005e727ec0c840919cc564c4e1943e8ad023b6a3b8de3973fd7f58c04dff3f002152fe5390f909aa8ac290c402e26cc7e0ca687eb7fa3cebf18bcce38748057c74ff33a888aa48e6577e5fd150b34437127a80d2c31a835c1aba01de5a3823da85d741d4e6c5f0b4385f6afc42d4bafed4f4ac2ffeb51b538ed67e6eb57f01fb5eed152e35d934362851445221edfa266afcf94224b086a9948fe865d37dce92f9771532c0e53fe25438b34312a59ad54f7170a138a8eb3929e4284d20fae78d741c5180aa18e732d43157385186115300ad15cf9b280b18c44a43e338d5cd5aba706046fa6d500b79ce3a2e206c547918d10cb798541e8e56ab964211fa68cdcbf3e5525ea63600551fbf51e1b44960bbee7e27cfde57147fcfe2ec162249eb201f67f96f2726701240a1d010040ab98a6d2c3a35fdec3d54c855895b4827592c4bc5fd7362aba4fcc09ad560c1f0495aa1ae1baf855ce6d64089927b0b3e381d98ee5c09b7ad8470854dd67232320907e222ae0ad87c668c0f03fc59df63bdbe7d744332b122218265078fe035ca22202d36d68b4b74e7f92ce8a6637c9b487d70aecaa93473916d8fea1b606f792f0d63c92c7fda588d899322d6596472b816836b9080c146bfafb1794ab04dae7d1e4ef989b85b2c27bee1a5e27a0e29a53b979c52d2e22905b163364e11be30e2f974dfbcb72b880f56eac6af4db49790f7ea1a9cdc28268872986e6c42285aa052d3a4c5bf7f8288bf4a5bec63d8e8f63b92fc643bd4ca48abef7d77206f3afbc7c70a7388dd21f2820258d2c409a8cf47ca60d871c642ed5fe612565146525437ea0483a7934f3ad0e8412e11c446536e7e8ce178d019ece6ea97e8b2b7a9edc7e5037b47117ca4b4506ab53de7421fac590de50c18e206d5149733f2f11f187294161624e6e77e193e80022dc134db1d8e323f0a125c24de2adc0d70a0f331b39fd521f482c357d2bfa4c14eda00877cf973c3f14baf717c4804f811dc12d68a280d077a108a55ff7dd538dc7449c65c60d93739ad32907f219201f2a4724284a8e8b1f3e6c47714684ff8874211af18bf12362231688cad58511c90049f83803feea3e3531a24544bc3b713bd865d9eab7d8b9b4106ac9956883b124e99dc2b9aa601fe2aa9977749f8b3756fb5b7ede1e7fb0ffadfc99cf8678641f83ae6b61b14059467a8c93df6a97ec497016468693d3501559e2afdd1d9b9d2c3859bc2e58178fbe3b1c8747a5cd7d40f6e1f72e3b7fdf085b8d3bc8a9924c0751dc19b2c061a4a8db83df17d380ace8f6d0360799bb37cd466127febfa82a2e865bcde97e1d20bc338490c53629b3bd88dd2d9f7d8f49493ff5aee95bceae2f80ca596b50a42e74d0fa18b84310ce63fcc75d109fb9b8590235d9f97610f82d1cba940d7bd09d31ae507d284427a19b00384acfe76e83d104ba62fc28f6fe28b70ee95981ce328e9af7a0aff28884679b3df7c92a598d9cdcc5ae68bdd75c1cdbe678da98bcef32e40fd97fc70f42daf407ae738f9fab6f09a55ff316b43b2168eee29148770d08f1b11851a9fbafa7353bad1086b7a77ea90e4669f63d65071e5965b97043da02002d98ef1c1d3d4195223a88dd75c9ada756f28a9e9d1f07a42aa44197ed5e6e5d00262ca076a71d7f8777ca38f461a031ddce0823e7751d3b4b8d8b3b8d9f0b3a5dcccb888fdf122c093d4e59f1c6f385ecea2dfe34612c3cc4582be2003e52d7720659093f0760a5104d1b54071b9da1ce31b0e0fe2f2ca9b12d0eea3bf80ea1224d9ce49192e3711954332031e223b82f64958113f31bb22069d020736f08098626efac46abd472810c3239599e07e27c9cfcf61e8224b111da07a918e4f8dde49ae0b36d1b24a9b9912343b588ddae52c3bab7e1f31b80d4278e72c9e2ef7cf2ae49db43d3b96c169ba1cbbfde4a848a9907c03ac31d20c07d51306f7765d3132611deff4f54a0cad2ac5d68686b4a9b739d8fcb111afa7209ba423109e5180e5db100bbbc96f8a4ab9065335574a9112f31302f510d102cd393d022d39dca93538fac1e8916b65c856743847b3b844182062c1a5425949478fda4f40d3555d25110f4734c89f874bd76904a2811ecac41b9f1c80c00e46c40b5d6b87e435d30f67e690da3bb7fdab1de5423b3f64dbc790735843f1df96dd3ac678f6381ce9801e4890008c2d497c229e602bf6e8fa11dcd519c361ca589045ad3f70458fa968afc3bb78628e856c1b92ff520a6911ff8ac2c6fe7032d498690ac94ac6ffa8cc737b9ac07c2ca042fb3fb50490dc671c3c4d7c4e40541c745fd4f725a2b55b3b93d9fb781f0ff6971ecf0234492a857276c742de61df03cef596fa9b074f81155386421a30e7f9a0d4bdd73a9f9b18e6eda99404c19bd08afe401f40f2ae94726211680816d5041253c9f484dd2df20089343e19c0a5c6eb0baa2b44261e8c35d3afb28304782933ecfda72b35ba606740c20cd9611882b5ac4bbfc323e47440490f54ede70e869b53f542129779351bde812a3b115c10413fc83e517fdca14be4bf241604d57582c42e47c5bc187f336467bf8b126f91aa55cbd493a0e1b1434184b8480b421b1e209d8dd303cae8491e58af86d10452630faa09445bb34d11ef21708764d026c204345b50aea2236119b849b400ce7a1d2ca837cdf6dccbef015f051e338a2d697c56e018694f81d2743a948c90c2372362accef69576c9a1b3128b8388a8790e13bcecd3126e64b3126ad2d822ce18e54c3a3208811ef295c8e77fa762e72a1059f46cd52ffde0ad44f6fafba0dd0b133572b17a7b6180f6aedaad2f92ff3bb018c336cc245ab18ab1701fd18062b5ecb61631ef3ea3e238b150e692b334fd8deb8a85f998223d0f73e5644a622c6f241f8e23a425447bb9d7bf2f1e1332b2f85a3f0996b28339f0dd5832f4727b0454111b43bf194d7c9ef55b1e04f8de053671f12c38b48fb4da536c09a7f2c0508628009c21378e63ed71343681caf21b8d1ab004043353bf0ba7910758503041b38955b446ccdeb4ab029e153e0610c20061baf262c4c4f10b86007d385013e52ab8d82ae547436f1d05a474784fcfbec6a710cec0949c47330939252050746bde698576a8f2c9c30ae3d9a3676833b595dbaf0b558c98fab34cf98821b1e5ed1babb7626791f1d7a67c66ca5309d36b437404ef715c42ad27f60946ed42a471b793f1e63a1f45ada102c706170bc8d098cbaf7a2e325d9d06efdaf0ae41075f2861391f7201a342fba4b86f409cb17cbbf84148254e1a74527ba0d376718f1a71fe2b1f8fa7af8eae621b36f159b28192a7ff1125ba34843fce3bc73450de0cc9b6b7ba6e6cd5b58cecb17359b02ed774827fd4200683490b3b8efe04f15f008cc2deb14f51c534c862066343f9116729db1026cdae7c30a10698999d50c6adb18c1cf8d51e689107718308c45306189144a700139a5a161dcae3e7f391f1b384792e9b2176f409873301b418a27b8a4fb9e8755979f6e580a090e93240032ff08ac40ba815386964fe1983eb189b52d2e239b2295fbe568e7c704f4f601ca789bd9b30bfc09a63c3b39e93381ebacf82152d59ae2a29283b1691323d8064c179636ee1fb65d0c5f47c815e735e1d3fee34ba3ebe5640219040b1619001309bada723a55e135e45b1d0b04fe831cdd050fcef2606a442f4ee25c683e2e1a007db882dec655ccd7864c148f34a606400f61a0e3f0e41e3d6bc36ad6f0952da0f400b2b925d91ac58623838ffa63b33d2da68a4df9cfe3028cd2605a484c2e5f19c6f33a6b016a8c095e3201b18140a4885b9b2ad25afdc69949a9657f1401397c386c9b8dada8dd73dbf133549cf2eb3d130289dcfee9351183040503b91f2ed690eb10b7b9863834acf23d41771f20c000db6e84c4986d5f21fb518f0f156fc689894331f3c5d070cadd1a3a7b06a3eec4c981bae7f8532801f61413f8053af01eda34319c0b38e1771efe0ce2d0039dbbcb857fa04b4bc3ac1eeb61cb04fb233d239656b77258a6e11f85b83587fc2ec216ed865eb5ba67e91d97447d2dbe53dc757e0d3e92f6221b0d53117a354b62ee85c2f9892c3d579a6c691c411bd108e7a8c622400b00127fa9b17a76a3911bfa14dd080261b4000c3a640d4a15fb89903fb4d1e76ffd233dd9eec56dce471de583b485a21cca110c64120eed0bd1d03869d9750862a4c089056897223a9c507a24b7fd820e1e93e1034b3f5f2d28a4a3f8764a3104c20099fe38fc058b160a367b0dd4d143c71e22dc3857fa2b836c9ac7e469c616eb68f225a33ee9c15395f4d100584741a07240ade8c068150aa8175b74d08cd47e7967208c32fce0b4398e2dcbef7b1a384851cf6766d62231dce817d22121b0b11fced51dec3770517e4800fa42fc636f23848140cd962377fb7c8d2c30b45f72421e665155baca8020f86ab72d4653cdfa88a8f25f2d29465ecac768757b487bc9c9ac728cd6094e32970a25bdc607475a2ba40d3ede14a70be41e9dd358c9d8c71fe42ba130e4dd9e7089c5b5b08a347f7f417348d30827483d2d252cc1623dcd03e181ce5d3b2baedb41ccd116bee3d87b6586b13d21be8eb1e73888ec2220b3af9990f6b9fdf6979143db14889a0eddcb7e01546b0f8bd1b1f5fc6c93afb4c682ff36420e47e38842b5e43e093ee2d80472b18e28059437fdcc83ba07407ea52905f3c35062a445b7ea5ddb1ca15c343af865cb8710cb267149712cc01a9876c4c4d7069de52d8fe37606aa18324db40362adfd4604af7e59152ad78ea0645f22d3478b5bba497572dc7d6602818b24e8fa4ed67406b411da546f2a91a5d6fbfb87a27fa0ee6460dd4452dff03caac69461e19bb910acd4204e5f8f1e088d67cb8f1e4426eac1040788adb31752db33969b8f4e630c979ac90feb3323d73c264e3ddcebae5fc0ad37602eda2e2fb6ce605fe3353c2fe1b20acf8fb3650eb727365ddb2a54b5209c3bf70b3220c417b2bc2193e639118c2adbbdfa6a0050ccf6d2da9ef1564eed6ac9907fd38e6279b87074c14c421619367f0723b75ca9e3e3f7e47c707a957f488d6c5938e88d291ead52629a4811cfe343dcd30f5650bea803815e46b2added6ba02dbf73e439267aa572ff7d41634a0523d3b116cfd91f0271b4b43bcc766e27564a1d544bde156dd6da7904a04077dec15ce3a03307843c1a5152e3703a699f3a5c6bfbf1945ee129b26d0fd2531aa9496c02b004ae7e9e04315c423347b578b98a6dfc85e37d5506b358e9c2d1f1c5d44144800897c8bf8f19007e7caf1c4dc470513e58f603fc3d44ccf0d1b4f9accd55458df7153834ed68be92539b0654cde789b06677545c388e9dc5b0c98887f4a053fc716304ec971155c9be2a22727eeed8518975c4cc75b3ed0c21469a5fbfb1f8f6d8b5c451c51a3e1b7d1ccf39d9b7eda958189cf6886bb86921c2a3c12c8b6d0e8808c86735d1ba3ecdc3b8b62eaa099d5d080ed58760486981cc8ac0ec99e0cee6b1117cd4b1cc454a521c462cff3798068eab5eeece29c7611566a5c2d669ff25c79173245054ba67d6a78eb9a140f533e7857a80c1f3c7518e7902113a5ff386387ebb3acf59fc1e414975fb932ca33dfe225ddc69c13e219994dc27e6916cb507306f2d9d390cad3f3aaa22cfdb895edc283f07c06cf03034ced53e8af2a1aef14ea482955e57a0668d54ddc5acd7d9e9e5ae37bfd946518075a7f6cc554ff2cedc6eca7ce411ca6fcaa227b82d7de658d090ff9c2698c24715e91fe00bab6314df9c0b36efbe650b0851844bb5e23782e934211287ca11cd38609d081eaeca2ef032e1dde32e93c8df935a59556c967340e8e99188aae2ab2586f4e4dd80c1748c81e8130dbfad381d50f5d07a7734d2703f4313fce83'

let gpk = {X: ['5723195899829869360355735301475034960183765743883956670260556700304561939775', '15030566888555072222300603577241433726177959843784551443730472582972215820810'], Y: ['21136863447758371055855435029370840801392490189244715848977694295806880691066', '19918577776357251387334608329875665792259141288711508547524739451628191582134']}

// pEvals for input: 2655988642
let pEvalAcc1 = {X: '3417835277667431126513177353064326249975345932404827519353834584300664661668', Y: '7415261009277197710510990202361100458100892338666650463715693578120299408611'}
let proofAcc1 = {z: '4201080077361113636490438265093811558447350419863382439259883522073051633537', c: '10141005870070197945513063437491144594014624813291152504111923724863019787561'}

let pEvalAcc2 = {X: '19576191054871484361866124682880085372694242750347820154424303872305011412204', Y: '13865689168026339103022927054960831195901337129250071046534411017065609884605'}
let proofAcc2 = {z: '4428897057820644061928405901362831113070238315575459230191472519878818322969', c: '21174693843267379073234475924730977796896138313561416121901429566599809353356'}

let pEvalAcc3 = {X: '8953281448267351535840283553385951023574630152265383247937370911846456469881', Y: '19463665979465697570065248247221791596036695098805637210668987084790239735414'}
let proofAcc3 = {z: '17522728872847956579216652117385248041191293489852942741346105862624073263500', c: '17566259827069807416047081828415562000366803894455887135865019224025666451752'}

let pEvalAcc4 = {X: '21751120773733902951146495299971061621994334847873982526912246577282049575626', Y: '1968332745446202883347903133205314996217849900214314533855055639828096923581'}
let proofAcc4 = {z: '6404147767282247060934130727538772951850779755036609918737897658665621659135', c: '17995398030318166451335768941376259775108027035634243736287341188998220245299'}

let pEvalAcc5 = {X: '21025306118325630092726639533381092724294772081916304289936268147533313951805', Y: '7912393511957536035431594402371766827327545901610207424461738949176017309065'}
let proofAcc5 = {z: '6945586558145867621144567563884166497397818956837593008718738789117996843381', c: '5161638881405741208601280164924326515692240957572689479388774929175802629035'}

let combinedSigma = {X: '19530533679215397651485398553050948879466713746327407509791012205473365859987', Y: '222745608289019522547805804936443557730246285411524202516818394002813364755'}

let expectedRandom = '0x5ef1a76a6bf28bd282549d158bf56ce65af5bb0cae3f67dca04dec4aa617be60'



const cfg = hre.network.config
const local_provider = new providers.JsonRpcProvider(cfg['url'])

// const deployerPK = hre.network.config.accounts[0]
// const deployerWallet = new Wallet(deployerPK, local_provider)

describe('ZKDVRF on-chain tests', async () => {
    before(async () => {
        Halo2Verifier = await(await ethers.getContractFactory('contracts/Halo2Verifier-3-5-g2.sol:Halo2Verifier')).deploy()
        GlobalPublicParams = await(await ethers.getContractFactory('GlobalPublicParams')).deploy()
        PseudoRand = await(await ethers.getContractFactory('PseudoRand')).deploy()
        Zkdvrf = await (
            await ethers.getContractFactory('zkdvrf')
        ).deploy(Halo2Verifier.address, GlobalPublicParams.address, PseudoRand.address, minDeposit)
        
        account1 = (await ethers.getSigners())[0]
        account2 = (await ethers.getSigners())[1]
        account3 = (await ethers.getSigners())[2]
        account4 = (await ethers.getSigners())[3]
        account5 = (await ethers.getSigners())[4]
        account1Address = await account1.getAddress()
        account2Address = await account2.getAddress()
        account3Address = await account3.getAddress()
        account4Address = await account4.getAddress()
        account5Address = await account5.getAddress()
    })

    describe('Initialization', async () => {
        it('should be initialized', async () => {
            const memberCount = await Zkdvrf.memberCount()
            const threshold = await Zkdvrf.threshold()
            expect(memberCount).to.be.eq(5)
            expect(threshold).to.be.eq(3)
            expect(await Zkdvrf.owner()).to.be.eq(account1Address)
        })
    })

    describe('NIDKG Phase 1 - Adding Nodes', async () => {
        it('should be able to add nodes', async () => {
            await Zkdvrf.addPermissionedNodes(account1Address);
            expect((await Zkdvrf.addrToNode(account1Address)).nodeAddress).to.be.eq(account1Address)
        })
        
        it('should not be able to add same node again', async () => {
            await expect(Zkdvrf.addPermissionedNodes(account1Address)).to.be.revertedWith('Node has already been added');
        })

        it('non-owner should not be able to add nodes', async () => {
            await expect(Zkdvrf.connect(account2).addPermissionedNodes(account2Address)).to.be.revertedWith('OwnableUnauthorizedAccount("0x70997970C51812dc3A010C7d01b50e0d17dc79C8")');
        })

        it('should not be able to add more nodes than predefined count', async () => {
            await Zkdvrf.addPermissionedNodes(account2Address);
            await Zkdvrf.addPermissionedNodes(account3Address);
            await Zkdvrf.addPermissionedNodes(account4Address);
            await Zkdvrf.addPermissionedNodes(account5Address);
            await expect(Zkdvrf.addPermissionedNodes(await ((await ethers.getSigners())[5]).getAddress())).to.be.revertedWith('All members added');
        })

        it('should not be able to start NIDKG', async () => {
            await expect(Zkdvrf.startNidkg()).to.be.revertedWith('Not all Members are ready')
        })
    })

    describe('NIDKG Phase 1 - Confirming Registration', async () => {
        it('should not be able to register through a non-permissioned node', async () => {
            await expect(Zkdvrf.connect((await ethers.getSigners())[5]).registerNode(pubKeyAcc1, {value: minDeposit})).to.be.revertedWith('Unauthorized call')
        })

        it('should not be able to register without deposit', async () => {
            await expect(Zkdvrf.registerNode(pubKeyAcc1, {value: minDeposit.sub(1)})).to.be.revertedWith('Must provide enough node deposit')
        })

        it('should not be able to register with invalid pub key', async () => {
            const invalidPubKey = {X: '13022564727105651777525980989432672761973150245441769669319632814966958345930', Y: '784968079987676224643066681266495342411838584902826230352199930579969951847'}
            await expect(Zkdvrf.registerNode(invalidPubKey, {value: minDeposit})).to.be.revertedWith('Invalid Public Key submitted')
        })

        it('should be able to register with deposit', async () => {
            await Zkdvrf.registerNode(pubKeyAcc1, {value: minDeposit})
            expect(await Zkdvrf.nodes(0)).to.be.eq(account1Address)
            expect((await Zkdvrf.addrToNode(account1Address))[2]).to.be.eq(minDeposit)
            expect((await Zkdvrf.pubKeys(account1Address))[0]).to.eq(pubKeyAcc1.X)
            expect((await Zkdvrf.pubKeys(account1Address))[1]).to.eq(pubKeyAcc1.Y)
        })

        it('should not be able to register the same node again', async () => {
            await expect(Zkdvrf.registerNode(pubKeyAcc1, {value: minDeposit})).to.be.revertedWith('Node Already registered')
        })

        it('should not be able to start NIDKG', async () => {
            await expect(Zkdvrf.startNidkg()).to.be.revertedWith('Not all Members are ready')
        })

        it('should be able to register all nodes', async () => {
            await Zkdvrf.connect(account2).registerNode(pubKeyAcc2, {value: minDeposit})
            await Zkdvrf.connect(account3).registerNode(pubKeyAcc3, {value: minDeposit})
            await Zkdvrf.connect(account4).registerNode(pubKeyAcc4, {value: minDeposit})
            await Zkdvrf.connect(account5).registerNode(pubKeyAcc5, {value: minDeposit})
            expect(await Zkdvrf.nodes(1)).to.be.eq(account2Address)
            expect(await Zkdvrf.nodes(2)).to.be.eq(account3Address)
            expect(await Zkdvrf.nodes(3)).to.be.eq(account4Address)
            expect(await Zkdvrf.nodes(4)).to.be.eq(account5Address)
            expect((await Zkdvrf.addrToNode(account2Address))[2]).to.be.eq(minDeposit)
            expect((await Zkdvrf.addrToNode(account3Address))[2]).to.be.eq(minDeposit)
            expect((await Zkdvrf.addrToNode(account4Address))[2]).to.be.eq(minDeposit)
            expect((await Zkdvrf.addrToNode(account5Address))[2]).to.be.eq(minDeposit)
            expect((await Zkdvrf.pubKeys(account2Address))[0]).to.eq(pubKeyAcc2.X)
            expect((await Zkdvrf.pubKeys(account2Address))[1]).to.eq(pubKeyAcc2.Y)
            expect((await Zkdvrf.pubKeys(account3Address))[0]).to.eq(pubKeyAcc3.X)
            expect((await Zkdvrf.pubKeys(account3Address))[1]).to.eq(pubKeyAcc3.Y)
            expect((await Zkdvrf.pubKeys(account4Address))[0]).to.eq(pubKeyAcc4.X)
            expect((await Zkdvrf.pubKeys(account4Address))[1]).to.eq(pubKeyAcc4.Y)
            expect((await Zkdvrf.pubKeys(account5Address))[0]).to.eq(pubKeyAcc5.X)
            expect((await Zkdvrf.pubKeys(account5Address))[1]).to.eq(pubKeyAcc5.Y)
        })
    })

    describe('NIDKG Phase 1 - Start NIDKG', async () => {
        it('non-owner should not be able to start NIDKG', async () => {
            await expect(Zkdvrf.connect(account2).startNidkg()).to.be.revertedWith('OwnableUnauthorizedAccount("0x70997970C51812dc3A010C7d01b50e0d17dc79C8")')
        })

        it('should be able to start NIDKG', async () => {
            await Zkdvrf.startNidkg()
            expect(await Zkdvrf.contractPhase()).to.be.eq(1)
        })

        it('should not be able to start NIDKG again', async () => {
            await expect(Zkdvrf.startNidkg()).to.be.revertedWith('NIDKG has already been completed')
        })
    })

    describe('NIDKG Phase 1 - Submit PP', async () => {
        it('should not be able to submit public params with invalid proof', async () => {
            await expect(Zkdvrf.submitPublicParams(ppAcc1, ppZkAcc2)).to.be.reverted
        })

        it('non-registered nodes should not be able to submit public params', async () => {
            await expect(Zkdvrf.connect((await ethers.getSigners())[5]).submitPublicParams(ppAcc2, ppZkAcc2)).to.be.revertedWith('Unauthorized call')
        })

        it('should be able to submit public params', async () => {
            await Zkdvrf.submitPublicParams(ppAcc1, ppZkAcc1)
            expect((await Zkdvrf.addrToNode(account1Address))[3]).to.be.eq(true)
            expect((await Zkdvrf.addrToNode(account1Address))[4]).to.be.eq(0)
        })

        it('should not be able to submit public params again', async () => {
            await expect(Zkdvrf.submitPublicParams(ppAcc1, ppZkAcc1)).to.be.revertedWith('Node already submitted')
        })

        it('all nodes should be able to submit public params', async () => {
            await Zkdvrf.connect(account2).submitPublicParams(ppAcc2, ppZkAcc2)
            expect((await Zkdvrf.addrToNode(account2Address))[4]).to.be.eq(1)
            await Zkdvrf.connect(account3).submitPublicParams(ppAcc3, ppZkAcc3)
            expect((await Zkdvrf.addrToNode(account3Address))[4]).to.be.eq(2)
            expect(await Zkdvrf.contractPhase()).to.be.eq(1)
            await Zkdvrf.connect(account4).submitPublicParams(ppAcc4, ppZkAcc4)
            expect((await Zkdvrf.addrToNode(account4Address))[4]).to.be.eq(3)
            await Zkdvrf.connect(account5).submitPublicParams(ppAcc5, ppZkAcc5)
            expect((await Zkdvrf.addrToNode(account5Address))[4]).to.be.eq(4)
            expect(await Zkdvrf.contractPhase()).to.be.eq(2)
        })
    })

    describe('NIDKG Phase 1 - Compute VK', async () => {
        it('should not be able to compute vk with invalid gpk', async () => {
            const invalidGpk = {X: ['5723195899829869360355735301475034960183765743883956670260556700304561939780', '15030566888555072222300603577241433726177959843784551443730472582972215820810'], Y: ['21136863447758371055855435029370840801392490189244715848977694295806880691066', '19918577776357251387334608329875665792259141288711508547524739451628191582134']}
            await expect(Zkdvrf.computeVk(invalidGpk)).to.be.reverted
        })
        
        it('should be able to compute vk', async () => {
            await Zkdvrf.computeVk(gpk)
            expect((await Zkdvrf.vkList(0))[0]).to.be.eq('13055946435997153760211276318153419293138548757892025947840604653165207749898')
            expect((await Zkdvrf.vkList(0))[1]).to.be.eq('4144541988847145621058092254279258719512577611856648953578229274329823310808')
            expect(await Zkdvrf.contractPhase()).to.be.eq(3)
        })
    })

    describe('NIDKG Phase 2 - Initiate Random generation', async () => {
        it('non-owner should not be able to initiate random', async () => {
            await expect(Zkdvrf.connect(account2).initiateRandom()).to.be.revertedWith('OwnableUnauthorizedAccount("0x70997970C51812dc3A010C7d01b50e0d17dc79C8")')
        })

        it('should be able to initiate random', async () => {
            // timestamp set forward 30 yrs, rand Input
            const newTimestamp = 2655988642
            await hre.network.provider.send("evm_setNextBlockTimestamp", [newTimestamp])
            await Zkdvrf.initiateRandom()
            await hre.network.provider.send("evm_mine", [])
            expect(await Zkdvrf.roundInput(1)).to.be.equal(newTimestamp.toString())
        })

        it('should not be able to initiate random without completing previous round', async () => {
            await expect(Zkdvrf.initiateRandom()).to.be.revertedWith('Earlier round not completed')
        })
    })

    describe('NIDKG Phase 2 - Submit Partial Evaluation', async () => {
        it('should not be able to submit partial eval with invalid proof', async () => {
            await expect(Zkdvrf.submitPartialEval(pEvalAcc1, proofAcc2)).to.be.revertedWith('Verification of partial eval failed')
        })

        it('non-registered nodes should not be able to submit partial eval', async () => {
            await expect(Zkdvrf.connect((await ethers.getSigners())[5]).submitPartialEval(pEvalAcc1, proofAcc2)).to.be.revertedWith('Unauthorized call')
        })

        it('should be able to submit partial eval', async () => {
            await Zkdvrf.submitPartialEval(pEvalAcc1, proofAcc1)
            expect(await Zkdvrf.lastSubmittedRound(account1Address)).to.be.eq(1)
            expect(await Zkdvrf.roundSubmissionCount(1)).to.be.eq(1)
        })

        it('should not be able to submit partial eval again', async () => {
            await expect(Zkdvrf.submitPartialEval(pEvalAcc1, proofAcc1)).to.be.revertedWith('Already submitted for round')
        })

        it('should not be able to generate random below threshold', async () => {
            await expect(Zkdvrf.generateRandom(combinedSigma)).to.be.revertedWith('Partial evaluation threshold not reached')
        })

        it('all nodes should be able to submit partial eval', async () => {
            await Zkdvrf.connect(account2).submitPartialEval(pEvalAcc2, proofAcc2)
            await Zkdvrf.connect(account3).submitPartialEval(pEvalAcc3, proofAcc3)
            await Zkdvrf.connect(account4).submitPartialEval(pEvalAcc4, proofAcc4)
            await Zkdvrf.connect(account5).submitPartialEval(pEvalAcc5, proofAcc5)
            expect(await Zkdvrf.roundSubmissionCount(1)).to.be.eq(5)
        })
    })

    describe('NIDKG Phase 2 - Generate Random', async () => {
        it('should not be able to generate random with invalid sigma', async () => {
            const invalidSigma = {X: '19530533679215397651485398553050948879466713746327407509791012205473365859090', Y: '222745608289019522547805804936443557730246285411524202516818394002813364755'}
            await expect(Zkdvrf.generateRandom(invalidSigma)).to.be.reverted
        })

        it('non-owner should not be able to generate random', async () => {
            await expect(Zkdvrf.connect(account2).generateRandom(combinedSigma)).to.be.revertedWith('OwnableUnauthorizedAccount("0x70997970C51812dc3A010C7d01b50e0d17dc79C8")')
        })

        it('should be able to generate random', async () => {
            await Zkdvrf.generateRandom(combinedSigma)
            expect(await Zkdvrf.roundToRandom(1)).to.be.eq(expectedRandom)
        })

        it('should not be able to generate random again without initiating', async () => {
            await expect(Zkdvrf.generateRandom(combinedSigma)).to.be.revertedWith('Answer for round already exists')
        })
    })

    describe('Fetch Random Values', async () => {
        it('getLatestRandom()', async () => {
            expect(await Zkdvrf.getLatestRandom()).to.be.eq(expectedRandom)
        })

        it('getRandomAtRound()', async () => {
            expect(await Zkdvrf.getRandomAtRound(1)).to.be.eq(expectedRandom)
        })

        it('getRandomAtRound() at invalid round', async () => {
            await expect(Zkdvrf.getRandomAtRound(2)).to.be.revertedWith('Answer does not exist for the round yet')
        })
    })
})
