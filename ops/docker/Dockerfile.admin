# Stage 1: Build Stage
FROM rust:1.80 AS rust-builder

# Install necessary build dependencies
RUN apt-get update && apt-get install -y \
    llvm \
    clang \
    libclang-dev \
    && rm -rf /var/lib/apt/lists/*

# Set environment variables for Rust
ENV LIBCLANG_PATH=/usr/lib/llvm-14/lib

# Create a working directory for Rust build
WORKDIR /app

# Copy Rust source code and build configuration files
COPY ./Cargo.toml ./Cargo.lock ./
COPY ./bin ./bin
COPY ./benches ./benches
COPY ./src ./src

# Fetch dependencies and build the Rust project
RUN cargo fetch && cargo build --release


# Stage 2: Node Build Stage
FROM node:20 AS node-builder

# Create a working directory for Node build
WORKDIR /app

# Copy Node.js project files and install dependencies
COPY ./package.json ./
RUN yarn install

# Copy the rest of the Node.js application source
COPY ./contracts ./contracts
COPY ./hardhat.config.ts ./
RUN yarn run build

COPY ./tsconfig.json .
COPY ./services ./services

# Stage 3: Runtime Stage
FROM node:20 AS runtime

# Install runtime dependencies if needed (e.g., curl)
RUN apt-get update && apt-get install -y \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Create working directory
WORKDIR /app

# Declare the directory as a volume
VOLUME /app/data

# Copy the built Rust binary and Node.js artifacts
COPY --from=node-builder /app /app
COPY --from=rust-builder /app/target/release/client /usr/local/bin/client

# Set the entrypoint or default command
CMD ["yarn", "run", "services:admin"]